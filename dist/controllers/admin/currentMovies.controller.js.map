{"version":3,"sources":["../../../controllers/admin/currentMovies.controller.js"],"names":["mysqlDetails","utils","getCurrentMovies","req","res","next","query","table","mysqlFormat","pool","getConnection","err","connection","error","rows","json","messgae","data","release","getMovieSchedule","params","movieImdbID","message","getScreens","mandatoryFields","checkReqBody","checkMandatoryRequestBody","screenType","deleteMovieSchedule","body","values","movieType","movieScreen","movieShowDate","movieStartTime","movieEndTime","updateMovieSchedule","addMovieSchedule","tableName","columns","result","insertToDB","then","success","errResponse","hasOwnProperty","addCurrentMovies","id","imdbID","title","released","runtime","rated","director","writer","genre","imdbRating","production","website","plot","poster_path","cast","boxOffice","module","exports"],"mappings":"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","file":"currentMovies.controller.js","sourcesContent":["/**\n * Created by swapnil on 18/02/18.\n */\n'use strict';\nimport * as mysqlDetails from '../../database/connectMySQL';\nimport * as utils from '../../services/utils.service';\n\nlet getCurrentMovies = (req, res, next) => {\n    /*Searching from Database*/\n    // for time being using this\n    // var query = \"SELECT * FROM ?? WHERE ??=? AND `upReleaseDate` BETWEEN (CURDATE()) AND (DATE_SUB( CURDATE() ,INTERVAL -20 DAY))\";\n    let query = 'SELECT * FROM ?? WHERE ?? != ?';\n    let table = ['admin_movieinfo', 'infoMovieRuntime', 'N/A'];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            next({error: err});\n        } else {\n            connection.query(query, function (err, rows) {\n                if (err) {\n                    next({error: err});\n                } else {\n                    res.json({\n                        messgae: 'Successfully fetched current movies',\n                        data: rows\n                    });\n                }\n            });\n        }\n        connection.release();\n    });\n    /*End searching*/\n};\n\nlet getMovieSchedule = (req, res, next) => {\n    let query = 'SELECT m_s.*,a_m.* FROM ?? as m_s ' +\n        'JOIN  ?? as a_m ON m_s.movieImdbID = a_m.infoImdbID';\n    let table = ['movie_schedule', 'admin_movieinfo'];\n    if (req.params.movieImdbID) {\n        query += ' WHERE m_s.movieImdbID = ?';\n        table = ['movie_schedule', 'admin_movieinfo', req.params.movieImdbID];\n    }\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            next({error: err});\n        } else {\n            connection.query(query, function (err, rows) {\n                if (err) {\n                    next({error: err});\n                } else {\n                    res.json({\n                        message: 'Successfully fetched movie schedule',\n                        data: rows\n                    });\n                }\n            });\n        }\n        connection.release();\n    });\n};\n\nlet getScreens = (req, res, next) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['screenType'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.params, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    let query = 'SELECT * FROM ?? WHERE ?? LIKE ?';\n    /** @namespace req.params.screenType */\n    let table = ['admin_setting_screen', 'screenType', '%' + req.params.screenType + '%'];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            next({error: err});\n        } else {\n            connection.query(query, function (err, rows) {\n                if (err) {\n                    next({error: err});\n                } else {\n                    res.json({\n                        message: 'Successfully fetched screens',\n                        data: rows\n                    });\n                }\n            });\n        }\n        connection.release();\n    });\n};\n\nlet deleteMovieSchedule = (req, res, next) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['movieType', 'movieScreen', 'movieShowDate', 'movieStartTime',\n        'movieEndTime'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.body, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            next({error: err});\n        } else {\n            let query = 'DELETE FROM ?? WHERE (??=?) ' +\n                'AND (??=?)  AND (??=?)  AND (??=?)  AND (??=?) ';\n\n            let values = ['movie_schedule', 'movieType', req.body.movieType, 'movieScreen',\n                req.body.movieScreen, 'movieShowDate', req.body.movieShowDate,\n                'movieStartTime', req.body.movieStartTime, 'movieEndTime',\n                req.body.movieEndTime\n            ];\n            query = mysqlDetails.mysqlFormat(query, values);\n            connection.query(query, values, (err, rows) => {\n                    if (err) {\n                        next({error: err});\n                    } else {\n                        res.json({\n                            message: 'Successfully deleted showtime',\n                            data:rows\n                        });\n                    }\n                });\n        }\n        connection.release();\n    });\n};\n\nlet updateMovieSchedule = (req, res, next) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['movieImdbID', 'movieType', 'movieScreen', 'movieShowDate',\n        'movieStartTime', 'movieEndTime'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.body, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    mysqlDetails.pool.getConnection( (err, connection) => {\n        if (err) {\n            next({error: err});\n        } else {\n            let query = 'UPDATE ?? SET  ??=?,??=?,??=?,??=?,??=?,??=?';\n            let values = ['movie_schedule', 'movieImdbID', req.body.movieImdbID,\n                'movieType', req.body.movieType, 'movieScreen', req.body.movieScreen,\n                'movieShowDate', req.body.movieShowDate, 'movieStartTime',\n                req.body.movieStartTime, 'movieEndTime', req.body.movieEndTime];\n            query = mysqlDetails.mysqlFormat(query, values);\n            connection.query(query,  (err, rows) => {\n                    if (err) {\n                        next({error: err});\n                    } else {\n                        res.json({\n                            message: 'Successfully updated the movie showtime',\n                            data: rows\n                        });\n                    }\n                });\n        }\n        connection.release();\n    });\n};\n\nlet addMovieSchedule = (req, res, next) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['movieImdbID', 'movieType', 'movieScreen', 'movieShowDate',\n        'movieStartTime', 'movieEndTime'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.body, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    mysqlDetails.pool.getConnection( (err, connection) => {\n        if (err) {\n            next({error: err});\n        } else {\n            let tableName = 'movie_schedule';\n\n            let columns = ['movieImdbID', 'movieType',\n                'movieScreen', 'movieShowDate', 'movieStartTime',\n                'movieEndTime'];\n\n            let values = [req.body.movieImdbID, req.body.movieType,\n                req.body.movieScreen, req.body.movieShowDate,\n                req.body.movieStartTime, req.body.movieEndTime];\n\n            let result = utils.insertToDB(tableName, columns, values)\n                .then((success) => {\n                    res.json({\n                        message: 'Successfully added movie showtime',\n                        data: success.data\n                    });\n                }, (errResponse) => {\n                    next({error: errResponse.error});\n                });\n\n            if (result.hasOwnProperty('error')) {\n                next({error: err});\n            } else if (result.hasOwnProperty('data')) {\n                res.json({\n                    message: 'Successfully added movie showtime',\n                    data: result.data\n                });\n            }\n        }\n        connection.release();\n    });\n};\n\n\nlet addCurrentMovies = (req, res, next) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['id', 'imdb_id', 'title', 'released',\n        'runtime', 'rated', 'director', 'writer', 'genre', 'imdbRating', 'production',\n        'website', 'plot', 'poster_path', 'cast', 'boxOffice'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.body, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    mysqlDetails.pool.getConnection( (err, connection) => {\n        if (err) {\n            next({error: err});\n        } else {\n            let tableName = 'admin_movieinfo';\n\n            let columns = ['infoMovieID', 'infoImdbID', 'infoMovieName',\n                'infoMovieInTheatres', 'infoMovieRuntime', 'infoMovieRated',\n                'infoMovieDirectedBy', 'infoMovieWrittenBy', 'infoMovieGenre',\n                'infoMovieImdbRating', 'infoMovieProduction', 'infoMovieWebsite',\n                'infoMovieDescription', 'infoMoviePosterPath', 'infoMovieCasts',\n                'infoMovieBoxOffice'];\n\n            let values = [req.body.id, req.body.imdbID, req.body.title,\n                req.body.released, req.body.runtime, req.body.rated,\n                req.body.director, req.body.writer, req.body.genre,\n                req.body.imdbRating, req.body.production, req.body.website,\n                req.body.plot, '/images/nowShowing' + req.body.poster_path, req.body.cast,\n                req.body.boxOffice];\n\n            utils.insertToDB(tableName, columns, values)\n                .then((success) => {\n                    res.json({\n                        message: 'Successfully added movie to current',\n                        data: success.data\n                    });\n                }, (errResponse) => {\n                    next({error: errResponse.error});\n                });\n        }\n        connection.release();\n    });\n};\nmodule.exports = {\n    getCurrentMovies: getCurrentMovies,\n    getMovieSchedule: getMovieSchedule,\n    getScreens: getScreens,\n    deleteMovieSchedule: deleteMovieSchedule,\n    updateMovieSchedule: updateMovieSchedule,\n    addMovieSchedule: addMovieSchedule,\n    addCurrentMovies: addCurrentMovies\n};\n"]}