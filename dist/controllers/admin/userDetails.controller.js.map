{"version":3,"sources":["../../../controllers/admin/userDetails.controller.js"],"names":["mysqlDetails","utils","config","require","bcrypt","getAdminUserUserByEmailID","req","res","next","query","table","body","emailID","toLowerCase","mysqlFormat","pool","getConnection","err","connection","error","rows","json","message","data","release","getCurrentLoggedInUser","session","user","updateUser","mandatoryFields","checkReqBody","checkMandatoryRequestBody","passwordsMatch","salt","genSaltSync","app","bcryptSalt","hashPassword","hashSync","password","compareSync","confirmPassword","adminUserID","adminUserName","adminUserEmail","details","module","exports"],"mappings":"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","file":"userDetails.controller.js","sourcesContent":["/**\n * Created by swapnil on 10/02/18.\n */\n'use strict';\nimport * as mysqlDetails from '../../database/connectMySQL';\nimport * as utils from '../../services/utils.service';\nconst config = require('../../config');\nconst bcrypt = require('bcrypt');\n\nlet getAdminUserUserByEmailID = (req, res, next) => {\n    let query = 'SELECT * FROM ?? WHERE adminUserEmail = ?';\n    let table = ['admin_user', (req.body.emailID).toLowerCase()];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection((err, connection) => {\n        if (err) {\n            next({error: err});\n        } else {\n            connection.query(query, (err, rows) => {\n                if (err) {\n                    next({error: err});\n                } else {\n                    res.json({\n                        message: 'success',\n                        data: rows[0]\n                    });\n                }\n            });\n        }\n        connection.release();\n    });\n};\n\nlet getCurrentLoggedInUser = (req, res, next) => {\n    if (!req.session.user) {\n        next({\n            message: 'Please log in to continue.'\n        });\n    } else {\n        res.json({\n            message: 'Success',\n            data: req.session.user\n        });\n    }\n};\n\n/**\n * Sample request\n    {\n        \"adminUserID\":\"HyGHKGgUG\",\n        \"adminUserName\":\"Swapnil Kumar\",\n        \"adminUserEmail\":\"swapnilaryan.nsk@gmail.com\",\n        \"password\":\"father\",\n        \"confirmPassword\":\"father\"\n    }\n * @param req\n * @param res\n * @param next\n */\nlet updateUser = (req, res, next) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['adminUserID', 'adminUserName', 'adminUserEmail',\n        'password', 'confirmPassword'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.body, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    let passwordsMatch;\n    let salt = bcrypt.genSaltSync(config.app.bcryptSalt);\n    let hashPassword = bcrypt.hashSync(req.body.password, salt);\n    req.body.password = hashPassword;\n    passwordsMatch = bcrypt.compareSync(req.body.confirmPassword, hashPassword);\n    if (!passwordsMatch) {\n        next({message: 'Passwords don\\'t match.'});\n    } else {\n        let query = 'UPDATE ?? SET ??=?, ??=?, ??=?, ??=? WHERE ??=?';\n        let table = ['admin_user', 'adminUserID', req.body.adminUserID, 'adminUserName',\n            req.body.adminUserName,\n            'adminUserEmail', (req.body.adminUserEmail).toLowerCase(),\n            'adminUserPassword', req.body.password, 'adminUserEmail',\n            (req.body.adminUserEmail).toLowerCase()\n        ];\n        query = mysqlDetails.mysqlFormat(query, table);\n        mysqlDetails.pool.getConnection(function (err, connection) {\n            if (err) {\n                next({\n                    message: err\n                });\n            } else {\n                connection.query(query, (err, rows) => {\n                    if (err) {\n                        next({\n                            message: err\n                        });\n                    } else {\n                        res.json({\n                            message: 'User updated Successfully',\n                            details: rows[0]\n                        });\n                    }\n                });\n            }\n            connection.release();\n        });\n    }\n};\nmodule.exports = {\n    getAdminUserUserByEmailID: getAdminUserUserByEmailID,\n    getCurrentLoggedInUser: getCurrentLoggedInUser,\n    updateUser: updateUser\n};\n"]}