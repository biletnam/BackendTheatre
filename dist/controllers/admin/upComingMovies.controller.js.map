{"version":3,"sources":["../../../controllers/admin/upComingMovies.controller.js"],"names":["mysqlDetails","utils","async","config","require","theMovieDB","omdb","currentMovies","rottenTomatoes","recommendedUpComingMovies","req","res","next","query","table","mysqlFormat","pool","getConnection","err","connection","message","rows","json","data","release","getAddedUpComingMovies","error","addUpComingMovie","mandatoryFields","checkReqBody","checkMandatoryRequestBody","params","movieID","searchUpComingMovies","movieName","removeUpComingMovies","moveToCurrent","currentMovie","waterfall","callback","getExternalID","then","response","result","imdbID","imdb_id","getMovieCreditsByImdbID","Object","assign","getMovieByID","getMovieByImdbID","Runtime","runtime","key","hasOwnProperty","charAt","toLowerCase","tempkey","slice","body","cast","JSON","stringify","isAPI","movieURL","tomatoURL","crawlData","addCurrentMovies","module","exports"],"mappings":"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","file":"upComingMovies.controller.js","sourcesContent":["'use strict';\nimport * as mysqlDetails from '../../database/connectMySQL';\nimport * as utils from '../../services/utils.service';\nimport * as async from 'async';\nconst config = require('../../config');\nconst theMovieDB = require('../theMovieDB/theMovieDB.controller');\nconst omdb = require('../omdb/omdb.controller');\nconst currentMovies = require('./currentMovies.controller');\nconst rottenTomatoes = require('../rottenTomatoes/rottenTomatoes.controller');\n\nlet recommendedUpComingMovies = (req, res, next) => {\n    /*Searching from Database*/\n    // for time being using this..\n    let query = 'SELECT * FROM ?? WHERE ??=0 AND `upReleaseDate` BETWEEN (CURDATE())' +\n        ' AND (DATE_SUB( CURDATE() ,INTERVAL -20 DAY))';\n    //var query = \"SELECT * FROM ?? WHERE ?? LIKE ? AND \";\n    let table = ['admin_upcomingmovies', 'upAddByAdmin'];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            next({\n                message: err\n            });\n        } else {\n            connection.query(query, function (err, rows) {\n                if (err) {\n                    next({\n                        message: err\n                    });\n                } else {\n                    res.json({\n                        message: 'Successfully fetched recommended movies',\n                        data: rows\n                    });\n                }\n            });\n        }\n        connection.release();\n    });\n    /*End searching*/\n};\n\nlet getAddedUpComingMovies = (req, res, next) => {\n    /*Searching from Database*/\n    // for time being using this..\n    // let query = 'SELECT * FROM ?? WHERE ?? BETWEEN ' +\n    //     '((DATE_SUB( CURDATE() ,INTERVAL -1 DAY))) AND ' +\n    //     '(DATE_SUB( CURDATE() ,INTERVAL -30 DAY)) AND ??=1';\n\n    let query = 'SELECT * FROM ?? WHERE ??=1';\n    //var query = \"SELECT * FROM ?? WHERE ?? LIKE ? AND \";\n    let table = ['admin_upcomingmovies', 'upAddByAdmin'];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            next({error: err});\n        } else {\n            connection.query(query, function (err, rows) {\n                if (err) {\n                    next({error: err});\n                } else {\n                    res.json({\n                        message: 'success',\n                        data: rows\n                    });\n                }\n            });\n        }\n        connection.release();\n    });\n    /*End searching*/\n};\n\n// Still to be finished\nlet addUpComingMovie = (req, res, next) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['movieID'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.params, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    let query = 'UPDATE ?? SET ?? = ? WHERE ??=?';\n    let table = ['admin_upcomingmovies', 'upAddByAdmin', 1, 'upMovieId', req.params.movieID];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            next({error: err});\n        } else {\n            connection.query(query, function (err, rows) {\n                if (err) {\n                    next({error: err});\n                } else {\n                    let query = 'SELECT * FROM ?? WHERE ??=?';\n                    //var query = \"SELECT * FROM ?? WHERE ?? LIKE ? AND \";\n                    /** @namespace req.params.movieID */\n                    let table = ['admin_upcomingmovies', 'upMovieId', req.params.movieID];\n                    query = mysqlDetails.mysqlFormat(query, table);\n                    mysqlDetails.pool.getConnection(function (err, connection) {\n                        if (err) {\n                            next({error: err});\n                        } else {\n                            connection.query(query, function (err, rows) {\n                                if (err) {\n                                    next({error: err});\n                                } else {\n                                    res.json({\n                                        message: 'success',\n                                        data: rows[0]\n                                    });\n                                    // reqPro('http://' + configJson.localhost + ':' + configJson.sitePort + '/api/the_movie_db/' + rowws[0].upMovieName)\n                                    //     .then(function (response) {\n                                    //         //rottenTomatoesURL.replace(\"http://www.rottentomatoes.com/m/\",\"\")\n                                    //         reqPro('http://' + configJson.localhost + ':' + configJson.sitePort + '/api/rotten_tomatoes/' + rowws[0].upMovieName)\n                                    //             .then(function (response) {\n                                    //             });\n                                    //     });\n                                    //\n                                    // reqPro('http://' + configJson.localhost + ':' + configJson.sitePort + '/api/db/copy/upcomingmovies/' + rowws[0].upMovieName)\n                                    //     .then(function (response) {\n                                    //         // res.json(response);\n                                    //     });\n                                }\n                            });\n                        }\n                        connection.release();\n                    });\n                    // res.json(rows);\n                    // console.log(\"Success\");\n                }\n            });\n        }\n        connection.release();\n    });\n};\n\nlet searchUpComingMovies = (req, res, next) => {\n    /*Searching from Database*/\n    // for time being using this\n    let query = 'SELECT * FROM ?? WHERE ?? LIKE ? AND `upReleaseDate` BETWEEN' +\n        ' (CURDATE()) AND (DATE_SUB( CURDATE() ,INTERVAL -20 DAY))';\n    //var query = \"SELECT * FROM ?? WHERE ?? LIKE ? AND \";\n    /** @namespace req.params.movieName */\n    let table = ['admin_upcomingmovies', 'upMovieName', '%' + req.params.movieName + '%'];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            next({error: err});\n        } else {\n            connection.query(query, function (err, rows) {\n                if (err) {\n                    next({error: err});\n                } else {\n                    res.json({\n                        message: 'success',\n                        data: rows\n                    });\n                }\n            });\n        }\n        connection.release();\n    });\n};\n\nlet removeUpComingMovies = (req, res, next) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['movieID'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.params, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    let query = 'UPDATE ?? SET ?? = ? WHERE ??=?';\n    let table = ['admin_upcomingmovies', 'upAddByAdmin', 0, 'upMovieId',\n        req.params.movieID];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection((err, connection) => {\n        if (err) {\n            next({error: err});\n        } else {\n            connection.query(query, function (err, rows) {\n                if (err) {\n                    next({error: err});\n                } else {\n                    res.json({\n                        message: 'Successfully removed from upcoming list',\n                        data: rows\n                    });\n                }\n            });\n        }\n    });\n};\n\nlet moveToCurrent = (req, res, next) => {\n    let currentMovie;\n    async.waterfall(\n        [\n            (callback) => {\n                theMovieDB.getExternalID(req, res, next, false).then((response) => {\n                    currentMovie = response;\n                    callback(null, currentMovie);\n                });\n            },\n            (result, callback) => {\n                req.params.imdbID = result.imdb_id;\n                theMovieDB.getMovieCreditsByImdbID(req, res, next, false)\n                    .then((response) => {\n                        Object.assign(currentMovie, currentMovie, response);\n                        callback(null, currentMovie);\n                    });\n            },\n            (result, callback) => {\n                theMovieDB.getMovieByID(req, res, next, false).then((response) => {\n                    // currentMovie = response;\n                    Object.assign(currentMovie, currentMovie, response);\n                    callback(null, currentMovie);\n                });\n            },\n            (result, callback) => {\n            omdb.getMovieByImdbID(req, res, next, false).then((response) => {\n                // Special case. We won't store runtime from OMDB\n                response.Runtime = currentMovie.runtime;\n                Object.assign(currentMovie, currentMovie, response);\n                callback(null, currentMovie);\n            });\n        },\n        ],\n        (err, result) => {\n            //final result or err\n            for (let key in result) {\n                if (result.hasOwnProperty(key)) {\n                    if (key.charAt(0).toLowerCase() !== key.charAt(0)) {\n                        let tempkey = key.charAt(0).toLowerCase() + key.slice(1);\n                        result[tempkey] = result[key];\n                        delete result[key];\n                    }\n                }\n            }\n            req.body = result;\n            req.body.cast = JSON.stringify(result.cast);\n            /** @namespace req.params.isAPI */\n            if (req.params.isAPI == 'true') { // coercion required.\n                res.json({\n                    message: 'success',\n                    data: result\n                });\n            } else {\n                // call rotten tomatoes\n                req.body.movieURL = result.tomatoURL;\n                req.body.imdbID = result.imdbID;\n                rottenTomatoes.crawlData(req, res, next, false);\n                currentMovies.addCurrentMovies(req, res, next);\n            }\n        });\n};\n\nmodule.exports = {\n    recommendedUpComingMovies: recommendedUpComingMovies,\n    getAddedUpComingMovies: getAddedUpComingMovies,\n    addUpComingMovie: addUpComingMovie,\n    searchUpComingMovies: searchUpComingMovies,\n    removeUpComingMovies: removeUpComingMovies,\n    moveToCurrent: moveToCurrent\n};\n\n"]}