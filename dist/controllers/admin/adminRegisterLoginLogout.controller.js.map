{"version":3,"sources":["../../../controllers/admin/adminRegisterLoginLogout.controller.js"],"names":["mysqlDetails","utils","moment","require","bcrypt","shortid","config","salt","genSaltSync","app","bcryptSalt","register","req","res","next","mandatoryFields","checkReqBody","checkMandatoryRequestBody","body","message","userExists","query","table","adminUserEmail","toLowerCase","mysqlFormat","pool","getConnection","err","connection","rows","UserExists","passwordsMatch","hashPassword","hashSync","adminPassword","adminUserID","generate","password","compareSync","adminConfirmPassword","tableName","columns","values","adminUserName","result","insertToDB","then","success","json","data","errResponse","error","release","login","matchPassword","length","adminUserPassword","isMatch","session","user","cookie","cookies","save","logout","userSID","destroy","clearCookie","loginTest","loginStatus","status","module","exports"],"mappings":"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","file":"adminRegisterLoginLogout.controller.js","sourcesContent":["/**\n * Created by swapnil on 09/02/18.\n */\n'use strict';\n\nimport * as mysqlDetails from '../../database/connectMySQL';\nimport * as utils from '../../services/utils.service';\nconst moment = require('moment');\nconst bcrypt = require('bcrypt');\nconst shortid = require('shortid');\nconst config = require('../../config');\n\nlet salt = bcrypt.genSaltSync(config.app.bcryptSalt);\n// GET and POST Admin User Login and Registration\n// 1. Registration\n/**\n * Sample request\n * {\n\t\"adminUserEmail\" : \"swapnilaryan.nsk93@gmail.com\",\n\t\"adminUserName\":\"Swapnil nskq\",\n\t\"adminPassword\": \"father\",\n\t\"adminConfirmPassword\": \"father1\"\n    }\n * @param req mandatory fields 'adminUserEmail', 'adminUserName', 'adminPassword',\n * 'adminConfirmPassword'\n * @param res\n * @param next for error handling\n */\nlet register = (req, res, next) => {\n    // Step 1: Check if user already exists\n    // Check for mandatory fields\n    let mandatoryFields = ['adminUserEmail', 'adminUserName', 'adminPassword',\n        'adminConfirmPassword'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.body, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    let userExists = 0;\n    let query = 'SELECT COUNT(*) as UserExists FROM ?? WHERE adminUserEmail = ?';\n    let table = ['admin_user', (req.body.adminUserEmail).toLowerCase()];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection((err, connection) => {\n        if (err) {\n            return next({message: err});\n        } else {\n            connection.query(query, (err, rows) => {\n                if (err) {\n                    return next({message: err});\n                } else {\n                    userExists = rows[0].UserExists;\n                    if (!userExists) {\n                        let passwordsMatch;\n                        let hashPassword = bcrypt.hashSync(\n                            req.body.adminPassword, salt);\n                        // creating on the fly doesn't come in the request body\n                        req.body.adminUserID = shortid.generate();\n                        req.body.password = hashPassword;\n                        passwordsMatch = bcrypt.compareSync(\n                            req.body.adminConfirmPassword, hashPassword);\n                        if (!passwordsMatch) {\n                            return next({\n                                'message': 'Passwords don\\'t match',\n                            });\n                        } else {\n                            let tableName = 'admin_user';\n\n                            let columns = ['adminUserID', 'adminUserName',\n                                'adminUserEmail', 'adminUserPassword'];\n\n                            let values = [req.body.adminUserID, req.body.adminUserName,\n                                (req.body.adminUserEmail).toLowerCase(),\n                                hashPassword];\n\n                            let result = utils.insertToDB(tableName, columns, values)\n                                .then((success) => {\n                                    res.json({\n                                        message: 'User Registered Successfully',\n                                        data: success.data\n                                    });\n                                }, (errResponse) => {\n                                    return next({message: errResponse.error});\n                                });\n\n                            // if (result.hasOwnProperty('error')) {\n                            //     return next({\n                            //         message: result.error\n                            //     });\n                            // } else if (result.hasOwnProperty('data')) {\n                            //     res.json({\n                            //         message: 'User created successfully',\n                            //         data: result.data\n                            //     });\n                            // }\n                        }\n                    } else {\n                        return next({\n                            message: 'User ' +\n                            (req.body.adminUserEmail).toLowerCase() +\n                            ' already exists please login to continue'\n                        });\n                    }\n                }\n            });\n        }\n        connection.release();\n    });\n};\n\n/**\n * Sample request\n * {\n\t\"adminUserEmail\":\"swapnilaryan1@gmail.com\",\n\t\"adminUserPassword\":\"father\"\n    }\n * @param req adminUserEmail, adminUserPassword\n * @param res\n * @param next\n */\nlet login = (req, res, next) => {\n    let matchPassword;\n    let query = 'SELECT * FROM ?? WHERE adminUserEmail = ?';\n    let table = ['admin_user', (req.body.adminUserEmail).toLowerCase()];\n    query = mysqlDetails.mysqlFormat(query, table);\n    mysqlDetails.pool.getConnection((err, connection) => {\n        if (err) {\n            return next({message: err});\n        } else {\n            connection.query(query, (err, rows) => {\n                if (err) {\n                    return next({message: err});\n                } else {\n                    // User found! check for password authentication.\n                    if (rows.length > 0) {\n                        matchPassword = rows[0].adminUserPassword;\n\n                        let isMatch = bcrypt.compareSync(req.body.adminUserPassword,\n                            matchPassword);\n\n                        if (isMatch) {\n                            req.session.user = rows[0];\n                            req.session.cookie.user = rows[0];\n                            req.cookies.user = rows[0];\n                            req.session.save();\n                            res.json({\n                                message: 'Logged in Successfully',\n                                data: rows[0]\n                            });\n                        } else {\n                            return next({message: 'Wrong Password! Please try again'});\n                        }\n                    } else {\n                        return next({\n                            message: 'Email ID ' + req.body.adminUserEmail +\n                            ' doesn\\'t exist'\n                        });\n                    }\n                }\n            });\n        }\n        connection.release();\n    });\n};\n\nlet logout = (req, res, next) => {\n    if (req.session.user && req.cookies.userSID) {\n        req.session.destroy((err) => {\n            if (err) {\n                return next({\n                    message: err\n                });\n            } else {\n                res.clearCookie('userSID');\n                res.json({\n                    message: 'Successfully logged out'\n                });\n            }\n        });\n    } else {\n        res.clearCookie('userSID');\n        res.json({\n            message: 'Already logged out'\n        });\n    }\n};\n\nlet loginTest = (req, res) => {\n    res.json({user: req.session});\n};\n\nlet loginStatus = (req, res, next) => {\n    if (req.session.user && req.cookies.userSID) {\n        // Logged in\n        next();\n    } else {\n        next({\n            message: 'Logged out. Please log in to continue.',\n            status: 401\n        });\n\n    }\n};\n\nmodule.exports = {\n    register: register,\n    logout: logout,\n    login: login,\n    loginTest: loginTest,\n    loginStatus: loginStatus\n};\n"]}