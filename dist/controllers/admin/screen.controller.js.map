{"version":3,"sources":["../../../controllers/admin/screen.controller.js"],"names":["mysqlDetails","utils","getAdminScreenDetails","req","res","next","pool","getConnection","err","connection","message","query","rows","json","data","release","updateAdminScreenDetails","mandatoryFields","checkReqBody","checkMandatoryRequestBody","body","values","screenName","screenType","noOfSeats","mysqlFormat","postAdminScreenDetails","tableName","columns","result","insertToDB","then","success","errResponse","error","hasOwnProperty","module","exports"],"mappings":"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","file":"screen.controller.js","sourcesContent":["/**\n * Created by swapnil on 12/02/18.\n */\n'use strict';\n\nimport * as mysqlDetails from '../../database/connectMySQL';\nimport * as utils from '../../services/utils.service';\n\nlet getAdminScreenDetails = (req, res, next) => {\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            next({\n                message: err\n            });\n        } else {\n            connection.query('SELECT * FROM ??', ['admin_setting_screen'],\n                (err, rows) => {\n                    if (err) {\n                        next({\n                            message: err\n                        });\n                    } else {\n                        res.json({\n                            message: 'Successfully fetched contact details',\n                            data: rows\n                        });\n                    }\n                });\n        }\n        connection.release();\n    });\n};\n\nlet updateAdminScreenDetails = (req, res, next) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['screenName', 'screenType', 'noOfSeats'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.body, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            res.json(err);\n        } else {\n            let query = 'UPDATE ?? SET screenName=?, screenType=?, noOfSeats=? ' +\n                'WHERE ??=?';\n            let values = ['admin_setting_screen', req.body.screenName,\n                req.body.screenType, req.body.noOfSeats, 'screenName',\n                req.body.screenName];\n            query = mysqlDetails.mysqlFormat(query, values);\n            connection.query(query, values, function (err, rows) {\n                if (err) {\n                    next({\n                        message: err\n                    });\n                } else {\n                    getAdminScreenDetails(req, res, next);\n                }\n            });\n        }\n        connection.release();\n    });\n};\n\nlet postAdminScreenDetails = (req, res, next) => {\n// Check for mandatory fields\n    let mandatoryFields = ['screenName', 'screenType', 'noOfSeats'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.body, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        return next({message: checkReqBody.message});\n    }\n\n    mysqlDetails.pool.getConnection(function (err, connection) {\n        if (err) {\n            res.json(err);\n        } else {\n            let tableName = 'admin_setting_screen';\n\n            let columns = ['screenName', 'screenType', 'noOfSeats'];\n\n            let values = [req.body.screenName, req.body.screenType, req.body.noOfSeats];\n\n            let result = utils.insertToDB(tableName, columns, values)\n                .then((success) => {\n                    res.json({\n                        message: 'Successfully added a screen',\n                        data: success.data\n                    });\n                }, (errResponse) => {\n                    return next({message: errResponse.error});\n                });\n\n            if (result.hasOwnProperty('error')) {\n                return next({\n                    message: result.error\n                });\n            } else if (result.hasOwnProperty('data')) {\n                res.json({\n                    message: 'Successfully added a screen',\n                    data: result.data\n                });\n            }\n        }\n        connection.release();\n    });\n};\n\nmodule.exports = {\n    getAdminScreenDetails: getAdminScreenDetails,\n    updateAdminScreenDetails: updateAdminScreenDetails,\n    postAdminScreenDetails: postAdminScreenDetails\n};\n"]}