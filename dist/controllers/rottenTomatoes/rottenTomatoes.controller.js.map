{"version":3,"sources":["../../../controllers/rottenTomatoes/rottenTomatoes.controller.js"],"names":["utils","async","reqPro","require","cheerio","config","ratingRegex","rc","movieTitle","releaseYear","allCritics","freshness","tomatoMeter","averageRating","reviewCount","freshCount","rottenCount","criticsConsensus","topCritics","audienceScore","ratingCount","movieDescription","genre","boxOffice","$","obj","exec","text","temp","trim","match","parseInt","replace","allCriticsID","find","hasClass","isNaN","clone","remove","end","topCriticsID","temp2","contents","data","insertData","req","res","next","isAPI","tableName","columns","values","body","imdbID","JSON","stringify","insertToDB","then","success","json","message","console","log","errResponse","error","crawlData","mandatoryFields","checkReqBody","checkMandatoryRequestBody","hasOwnProperty","movieURL","htmlString","load","movieTitleID","eq","split","join","filter","item","push","parallel","callback","err","results","Object","assign","catch","module","exports"],"mappings":"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","file":"rottenTomatoes.controller.js","sourcesContent":["/**\n * Created by swapnil on 23/02/18.\n */\n\n'use strict';\nconst reqPro = require('request-promise');\nconst cheerio = require('cheerio');\nconst config = require('../../config');\nimport * as utils from '../../services/utils.service';\nimport * as async from 'async';\n\nlet ratingRegex = /(\\d+)?(.)?\\d+\\/\\d+$/;\nlet rc = {\n    movieTitle: 'N/A',\n    releaseYear: 'N/A',\n    allCritics: {\n        freshness: 'N/A',\n        tomatoMeter: 'N/A',\n        averageRating: 'N/A',\n        reviewCount: 'N/A',\n        freshCount: 'N/A',\n        rottenCount: 'N/A',\n        criticsConsensus: 'N/A'\n    },\n    topCritics: {\n        freshness: 'N/A',\n        tomatoMeter: 'N/A',\n        averageRating: 'N/A',\n        reviewCount: 'N/A',\n        freshCount: 'N/A',\n        rottenCount: 'N/A',\n        criticsConsensus: 'N/A'\n    },\n    audienceScore: {\n        tomatoMeter: 'N/A',\n        averageRating: 'N/A',\n        ratingCount: 'N/A'\n    },\n    movieDescription: 'N/A',\n    genre: 'N/A',\n    boxOffice: 'N/A'\n};\n\nconst audienceScore = ($, obj) => {\n    obj.tomatoMeter = /\\d+/.exec($('.audience-score .meter-value span').text())[0];\n\n    let temp = $('.audience-info > div:first-of-type').text().trim().match(ratingRegex);\n    obj.averageRating = (temp) ? temp[0].trim() : 'N/A';\n    obj.ratingCount = parseInt(/((\\d+)?(\\,)?)*\\d+$/.exec($('.audience-info >' +\n        ' div:last-of-type').text().trim())[0].replace(',', ''));\n    return obj;\n};\n\nconst allCritics = ($, obj) => {\n    let allCriticsID = '#all-critics-numbers';\n    obj.freshness = !$(allCriticsID).find('.meter-tomato').hasClass('fresh') ?\n        'rotten' : 'fresh';\n\n    let temp = parseInt($(allCriticsID).find('.meter-value span').text());\n    obj.tomatoMeter = (isNaN(temp)) ? 'N/A' : temp;\n\n    temp = $(allCriticsID).find('#scoreStats > div:first-of-type');\n    temp = temp.text().trim().match(ratingRegex);\n    obj.averageRating = (temp) ? (temp[0].trim()) : 'N/A';\n\n    temp = /\\d+$/.exec($(allCriticsID).find('#scoreStats >' +\n        ' div:nth-of-type(2)').text().trim());\n    if (temp) {\n        temp = parseInt(temp[0]);\n    }\n    obj.reviewCount = (isNaN(temp)) ? 'N/A' : temp;\n\n    temp = /\\d+$/.exec($(allCriticsID).find('#scoreStats >' +\n        ' div:nth-of-type(3)').text().trim());\n    if (temp) {\n        temp = parseInt(temp[0]);\n    }\n    obj.freshCount = (isNaN(temp)) ? 'N/A' : temp;\n\n    temp = /\\d+$/.exec($(allCriticsID).find('#scoreStats >' +\n        ' div:nth-of-type(4)').text().trim());\n    if (temp) {\n        temp = parseInt(temp[0]);\n    }\n    obj.rottenCount = (isNaN(temp)) ? 'N/A' : temp;\n    obj.criticsConsensus = $(allCriticsID).find('.critic_consensus').clone()\n        .find('span').remove().end().text().trim();\n\n    return obj;\n\n};\n\nconst topCritics = ($, obj) => {\n    const topCriticsID = '#top-critics-numbers';\n    obj.freshness = $(topCriticsID).find('.meter-tomato').hasClass('fresh') ?\n        'fresh' : 'rotten';\n    let temp, temp2;\n    temp = parseInt($(topCriticsID).find('.meter-value span').text());\n    temp2 = parseInt(($(topCriticsID).find('.meter-value').text()).replace('%', ''));\n    obj.tomatoMeter = (temp) ? temp : temp2;\n\n    temp = $(topCriticsID).find('#scoreStats > div:first-of-type').text()\n        .trim().match(ratingRegex);\n\n    obj.averageRating = (temp) ? temp[0].trim() : 'N/A';\n\n    temp = parseInt($(topCriticsID).find('#scoreStats span[itemprop*=reviewCount]')\n        .text().trim());\n    temp2 = ((($(topCriticsID).find('#scoreStats span')).contents())[2]);\n    if (temp2) {\n        temp2 = parseInt(temp2.data);\n    }\n    obj.reviewCount = (temp) ? temp : temp2;\n\n    temp = /\\d+$/.exec($(topCriticsID)\n        .find('#scoreStats >div:nth-of-type(3)').text().trim());\n    obj.freshCount = (temp) ? parseInt(temp[0]) : 'N/A';\n\n    temp = /\\d+$/.exec($(topCriticsID)\n        .find('#scoreStats >div:nth-of-type(4)').text().trim());\n    obj.rottenCount = (temp)? parseInt(temp[0]) : 'N/A';\n\n    obj.criticsConsensus = $(topCriticsID).find('.critic_consensus').clone()\n        .find('span').remove().end().text().trim();\n\n    return obj;\n};\n\nconst insertData = (req, res, next, isAPI) => {\n    let tableName = 'admin_movietomatoes';\n\n    let columns = ['mtImdbID', 'mtMovieTitle',\n        'mtAllCritics', 'mtTopCritics',\n        'mtAudienceScore', 'mtMovieDescription',\n        'mtGenre'];\n\n    let values = [req.body.imdbID, req.body.movieTitle,\n        JSON.stringify(req.body.allCritics), JSON.stringify(req.body.topCritics),\n        JSON.stringify(req.body.audienceScore), req.body.movieDescription,\n        JSON.stringify(req.body.genre)];\n\n    utils.insertToDB(tableName, columns, values)\n        .then((success) => {\n            if (isAPI){\n                res.json({\n                    message: 'Rotten Tomatoes data saved Successfully',\n                    data: success.data\n                });\n            } else {\n                console.log('Rotten Tomatoes data saved in DB successfully');\n                if (!req.body.isAPI) {\n                    res.json({\n                        message: 'Rotten Tomatoes data saved Successfully',\n                        data: success.data\n                    });\n                }\n            }\n        }, (errResponse) => {\n            next({message: errResponse.error});\n        });\n};\n\nconst crawlData = (req, res, next, isAPI = false) => {\n    // Check for mandatory fields\n    let mandatoryFields = ['movieURL', 'imdbID'];\n    let checkReqBody = utils.checkMandatoryRequestBody(req.body, mandatoryFields);\n    if (checkReqBody.message !== 'success') {\n        next({message: checkReqBody.message});\n    }\n\n    if (!req.body.hasOwnProperty('isAPI')) {\n        req.body.isAPI = false;\n    }\n    req.body.movieURL = req.body.movieURL.replace('https://www.rottentomatoes.com/m/', '');\n    req.body.movieURL = req.body.movieURL.replace('http://www.rottentomatoes.com/m/', '');\n    /** @namespace req.body.movieURL */\n    reqPro('http://www.rottentomatoes.com/m/' + req.body.movieURL)\n        .then((htmlString) => {\n            let $ = cheerio.load(htmlString);\n            let movieTitleID = '#movie-title';\n            rc.movieTitle = $(movieTitleID).clone().find('span').remove().end().text();\n            rc.movieTitle = rc.movieTitle.trim();\n            rc.releaseYear = parseInt(/\\d+/.exec($(movieTitleID).text())[0]);\n            rc.movieDescription = $('#movieSynopsis').text().trim();\n\n            rc.genre = $('.movie_info .content-meta .meta-row').find($('.meta-value'))\n                .eq(1).text().trim().split('\\n').join('').split(',');\n\n            let temp = [];\n            rc.genre.filter((item) => {\n                temp.push(item.trim());\n            });\n            rc.genre = temp;\n\n            rc.boxOffice = $('.content-meta.info >li div:contains(\\'Box Office\\') ')\n                    .next('div').text().trim() || 'N/A';\n\n            async.parallel([\n                    (callback) => {\n                        callback(null, audienceScore($, rc.audienceScore));\n                    },\n                    (callback) => {\n                        callback(null, allCritics($, rc.allCritics));\n                    },\n                    (callback) => {\n                        callback(null, topCritics($, rc.topCritics));\n                    }\n                ],\n                (err, results) => {\n                    rc.allCritics = results[1];\n                    rc.topCritics = results[2];\n                    rc.audienceScore = results[0];\n                    Object.assign(req.body, req.body, rc);\n                    if (req.body.isAPI) {\n                        res.json({\n                            message: 'Crawled data success',\n                            data: rc\n                        });\n                    } else {\n                        insertData(req, res, next, isAPI);\n                    }\n                });\n        })\n        .catch((err) => {\n            console.log(err);\n            next({message: '' + err});\n        });\n};\n\nmodule.exports = {\n    crawlData: crawlData\n};\n"]}