{"version":3,"sources":["../../services/utils.service.js"],"names":["mysqlDetails","deferred","require","checkMandatoryRequestBody","requestBody","mandatoryFields","reqBodyKeys","Object","keys","length","message","msg","i","indexOf","insertToDB","tableName","columns","values","defer","insertQuery","x","updateLength","updateRows","push","slice","table","concat","query","mysqlFormat","console","log","pool","getConnection","err","connection","reject","error","rows","resolve","data","release","promise","utils","module","exports"],"mappings":"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","file":"utils.service.js","sourcesContent":["/**\n * Created by swapnil on 09/02/18.\n */\n'use strict';\nimport * as mysqlDetails from '../database/connectMySQL';\nconst deferred = require('deferred');\n\nlet checkMandatoryRequestBody = (requestBody, mandatoryFields) => {\n    let reqBodyKeys = Object.keys(requestBody);\n    if (!requestBody || reqBodyKeys.length === 0) {\n        return {message: 'Request can\\'t be empty'};\n    }\n    let msg;\n    for (let i = 0; i < mandatoryFields.length; i++) {\n        if (reqBodyKeys.indexOf(mandatoryFields[i]) < 0) {\n            msg = mandatoryFields[i] + ' key is missing';\n            break;\n        }\n    }\n\n    if (msg) {\n        return {message: msg};\n    }\n    return {message: 'success'};\n};\n\nlet insertToDB = (tableName, columns, values) => {\n    let defer = deferred();\n    // create string like -> INSERT INTO ??(??,??,??,??)\n    let insertQuery = 'INSERT INTO ?? (';\n    for (let i = 0; i < columns.length; i++) {\n        insertQuery = insertQuery + '??';\n        if (i < columns.length - 1) {\n            insertQuery = insertQuery + ', ';\n        } else if (i === columns.length - 1) {\n            insertQuery = insertQuery + ') ';\n        }\n    }\n\n    // VALUES (?,?,?,?)'\n    insertQuery = insertQuery + ' VALUES (';\n    for (let i = 0; i < values.length; i++) {\n        insertQuery = insertQuery + '?';\n        if (i < values.length - 1) {\n            insertQuery = insertQuery + ', ';\n        } else if (i === values.length - 1) {\n            insertQuery = insertQuery + ') ';\n        }\n    }\n\n    // ON Duplicate\n    insertQuery = insertQuery + 'ON DUPLICATE KEY UPDATE ';\n    let x = 0;\n    let updateLength = columns.length;\n    let updateRows = [];\n    while (x < updateLength) {\n        insertQuery = insertQuery + '??' + '=' + '?' + ',';\n        updateRows.push(columns[x], values[x]);\n        x++;\n    }\n    insertQuery = insertQuery.slice(0, -1);\n\n    let table = [tableName];\n    table = table.concat(columns).concat(values).concat(updateRows);\n    let query = mysqlDetails.mysqlFormat(insertQuery, table);\n    console.log(query);\n    mysqlDetails.pool.getConnection((err, connection) => {\n        if (err) {\n            defer.reject({error: err});\n        } else {\n            connection.query(query, (err, rows) => {\n                if (err) {\n                    defer.reject({error: err});\n                } else {\n                    defer.resolve({\n                        data: 'success'\n                    });\n                }\n            });\n        }\n        connection.release();\n    });\n    return defer.promise;\n};\n\nconst utils = {\n    checkMandatoryRequestBody: checkMandatoryRequestBody,\n    insertToDB: insertToDB\n};\n\nmodule.exports = utils;\n"]}