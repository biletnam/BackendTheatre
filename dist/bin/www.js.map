{"version":3,"sources":["../../bin/www"],"names":["app","require","debug","http","config","port","normalizePort","set","server","createServer","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","console","process","exit","addr","address","log"],"mappings":";;AAEA;;;;AAIA,IAAMA,MAAMC,QAAQ,QAAR,CAAZ;AACA,IAAMC,QAAQD,QAAQ,OAAR,EAAiB,uBAAjB,CAAd;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,SAASH,QAAQ,WAAR,CAAf;;AAGA;;;;AAIA,IAAII,OAAOC,cAAcF,OAAO,KAAP,EAAcC,IAAd,IAAsB,MAApC,CAAX;AACAL,IAAIO,GAAJ,CAAQ,MAAR,EAAgBF,IAAhB;;AAEA;;;;AAIA,IAAIG,SAASL,KAAKM,YAAL,CAAkBT,GAAlB,CAAb;;AAEA;;;;AAIAQ,OAAOE,MAAP,CAAcL,IAAd;AACAG,OAAOG,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAJ,OAAOG,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA;;;;AAIA,SAASP,aAAT,CAAuBQ,GAAvB,EAA4B;AACxB,QAAIT,OAAOU,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,QAAIE,MAAMX,IAAN,CAAJ,EAAiB;AACb;AACA,eAAOS,GAAP;AACH;;AAED,QAAIT,QAAQ,CAAZ,EAAe;AACX;AACA,eAAOA,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED;;;;AAIA,SAASO,OAAT,CAAiBK,KAAjB,EAAwB;AACpB,QAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC5B,cAAMD,KAAN;AACH;;AAED,QAAIE,OAAO,OAAOd,IAAP,KAAgB,QAAhB,GACL,UAAUA,IADL,GAEL,UAAUA,IAFhB;;AAIA;AACA,YAAQY,MAAMG,IAAd;AACI,aAAK,QAAL;AACIC,oBAAQJ,KAAR,CAAcE,OAAO,+BAArB;AACAG,oBAAQC,IAAR,CAAa,CAAb;AACA;AACJ,aAAK,YAAL;AACIF,oBAAQJ,KAAR,CAAcE,OAAO,oBAArB;AACAG,oBAAQC,IAAR,CAAa,CAAb;AACA;AACJ;AACI,kBAAMN,KAAN;AAVR;AAYH;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACnB,QAAIW,OAAOhB,OAAOiB,OAAP,EAAX;AACA,QAAIN,OAAO,OAAOK,IAAP,KAAgB,QAAhB,GACL,UAAUA,IADL,GAEL,UAAUA,KAAKnB,IAFrB;AAGAH,UAAM,kBAAkBiB,IAAxB;AACAE,YAAQK,GAAR,CAAY,kBAAkBP,IAA9B;AACH","file":"www.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nconst app = require('../app');\nconst debug = require('debug')('backendtheatre:server');\nconst http = require('http');\nconst config = require('../config');\n\n\n/**\n * Get port from environment and store in Express.\n */\n\nlet port = normalizePort(config['app'].port || '8000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nlet server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n    let port = parseInt(val, 10);\n\n    if (isNaN(port)) {\n        // named pipe\n        return val;\n    }\n\n    if (port >= 0) {\n        // port number\n        return port;\n    }\n\n    return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n    if (error.syscall !== 'listen') {\n        throw error;\n    }\n\n    let bind = typeof port === 'string'\n        ? 'Pipe ' + port\n        : 'Port ' + port;\n\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n        case 'EACCES':\n            console.error(bind + ' requires elevated privileges');\n            process.exit(1);\n            break;\n        case 'EADDRINUSE':\n            console.error(bind + ' is already in use');\n            process.exit(1);\n            break;\n        default:\n            throw error;\n    }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n    let addr = server.address();\n    let bind = typeof addr === 'string'\n        ? 'pipe ' + addr\n        : 'port ' + addr.port;\n    debug('Listening on ' + bind);\n    console.log('Listening on ' + bind);\n}\n"]}